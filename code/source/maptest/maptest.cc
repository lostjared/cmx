#include"SDL.h"
#include<cmx.h>
#include<cmx_parser.h>
#include<cmx_debug.h>
#include<cmx_browser.h>
#include<cassert>
#include<fstream>
#include<iostream>

#include "font.mxf.h"

using cmx::Rect;

lvl::Level *initLevelParser(std::string path, std::string name, parse::MXLevelParser &parser, lexer::Scanner &scan) {
	lvl::Level *level=0;
	std::string txt;
	std::fstream file;
	file.open(name.c_str(), std::ios::in | std::ios::binary);
	if(file.is_open()) {
		char *buf=0;
		unsigned int len=0;
		file.seekg(0, std::ios::end);
		len = file.tellg();
		file.seekg(0, std::ios::beg);
		buf = new char [len+1];
		file.read((char*)buf, len);
		buf[len] = 0;
		txt = buf;
		delete [] buf;
		file.close();
		scan.setText(txt);
		parser.set(&scan);
		parser.collectTokens();
		if(parser.tokens.size() > 0)
		level = parser.parse();
		else return 0;
	} else {
		std::cerr << "ERROR could not load map from directory: " << name << "\n";;
		return 0;
	}
	if(level == 0) {
		std::cerr << "Could not load level\n";
		return 0;
	}
	if(level->loadLevelGraphics(path) == 0) {
		std::cerr << "ERROR graphics problems.\n";
		return 0;
	}
	return level;
}

int main(int argc, char **argv) {
	if(argc > 3) {
		std::cerr << argv[0] << " path to folder containg mxmap generated by MXLevelEdit\n\n -d for debug screen";
		return 0;
	}
	bool debug_on=false;
	if(argc == 3 && std::string(argv[2]) == "-d") {
		debug_on = true;
	}

	if(cmx::system::init_system() != 1) return 0;
	cmx::video::Surface *surface=cmx::system::init_surface();
	assert(surface != 0);
	cmx::debug::FileBrowser fb;
	cmx::debug::DebugScreen dbgscr;
	dbgscr.initRect(surface->objectRect());
	cmx::input::init_joystick();
	cmx::font::Font font;
	font.loadFont((const void*)font_mxf, sizeof(font_mxf));
	dbgscr.initFont(&font, 30, 25);
	font.printString((unsigned int*)surface->buffer, surface->w,  15, 15, 25, 25, _RGB(255, 255, 255), "Loading...");
	cmx::system::copy_surface(*surface);
	std::string path;
#ifdef _WIN32
	path = "c:/";
#else
	path = "/";
#endif

	fb.setOptions(path, &font, surface->objectRect(), surface);
	enum {SCR_OP=1, SCR_MAP};
	int scr = SCR_OP;
	std::string txt="";
	std::string name="";
	parse::MXLevelParser parser;
	lexer::Scanner scan;
	lvl::Level *level=0;

	if(argc > 1) {
		name=std::string(argv[1])+"/"+"mxmap/tiles.txt";
		scr = SCR_MAP;
		std::string path=std::string(argv[1]);
		level = initLevelParser(path, name,parser,scan);
		if(level != 0) dbgscr.printf("Level %s succesfully loaded\n", level->name.c_str());
		else dbgscr.printf("FAILED TO LOAD LEVEL ..\n");
	}
	bool active=true;
	while(active == true) {
		static cmx::event::Event e;
		while(e.procEvent()) {
			switch(e.type) {
			case cmx::event::EVENT_QUIT:
				active = false;
				break;
			case cmx::event::EVENT_KEYDOWN:
				if(scr == SCR_MAP) switch(e.skey) {
				case cmx::event::K_UP:
					level->scroll(level->UP);
					break;
				case cmx::event::K_DOWN:
					level->scroll(level->DOWN);
					break;
				case cmx::event::K_LEFT:
					level->scroll(level->LEFT);
					break;
				case cmx::event::K_RIGHT:
					level->scroll(level->RIGHT);
					break;
				}
				else if(scr == SCR_OP) switch(e.skey) {
					case cmx::event::K_UP:
						fb.movementUp();
						break;
					case cmx::event::K_DOWN:
						fb.movementDown();
						break;
					case cmx::event::K_RETURN:
						fb.movementInward();
						break;
					case cmx::event::K_ESCAPE:
						fb.movementOutward();
						break;
					case cmx::event::K_SPACE: {
						if(!fb.dirContainsMap()) {
							break;
						}
						std::string path = fb.atPath();
						std::cout << path << "\n";
						if(fb.isDir(path)) {
							level = initLevelParser(path, path+"/mxmap/tiles.txt", parser, scan);
							if(level != 0) {
								scr = SCR_MAP;
								debug_on = false;
								dbgscr.printf("Successfully loaded level: %s\n", level->name.c_str());
							}
							else
								dbgscr.printf("Could not load level at path: %s\n", path.c_str());
						}
					}
						break;

					default:
						break;
				}
				break;
			default:
				break;
			}
		}
		if(scr == SCR_MAP) {
			for(int i = 0; i < cmx::input::num_joystick(); ++i) {
				if(cmx::input::poll_joystick(i, cmx::input::BUTTON_UP)) {
					level->scroll(level->UP);
				}
				if(cmx::input::poll_joystick(i, cmx::input::BUTTON_DOWN)) {
					level->scroll(level->DOWN);
				}
				if(cmx::input::poll_joystick(i, cmx::input::BUTTON_LEFT)) {
					level->scroll(level->LEFT);
				}
				if(cmx::input::poll_joystick(i, cmx::input::BUTTON_RIGHT)) {
					level->scroll(level->RIGHT);
				}
			}
			surface->clearRect(surface->objectRect(), 0x0);
			if(level != 0) level->drawLevel(surface);
			dbgscr.drawDebugScreen(_RGB(255,255,255),(unsigned int*)surface->buffer, surface->w);
		} else if(scr == SCR_OP) {
			static int btn[12][12];
			for(int i = 0; i < cmx::input::num_joystick(); ++i) {
				for(int z = 0; z <= cmx::input::BUTTON_START; z++) {
					if(cmx::input::poll_joystick(i, z)) {
						if(btn[i][z] != 1) {
							btn[i][z] = 1;
							switch(z) {
							case cmx::input::BUTTON_UP:
								fb.movementUp();
								break;
							case cmx::input::BUTTON_DOWN:
								fb.movementDown();
								break;
							case cmx::input::BUTTON_CROSS:
								fb.movementInward();
								break;
							case cmx::input::BUTTON_CIRCLE:
								fb.movementOutward();
								break;
							case cmx::input::BUTTON_START:
								if(!fb.dirContainsMap()) {
									break;
								}
								std::string path = fb.atPath();
								std::cout << path << "\n";
								if(fb.isDir(path)) {
									level = initLevelParser(path, path+"/mxmap/tiles.txt", parser, scan);
									if(level != 0) {
										scr = SCR_MAP;
										debug_on = false;
										dbgscr.printf("Successfully loaded level: %s\n", level->name.c_str());
									}
									else
										dbgscr.printf("Could not load level at path: %s\n", path.c_str());
								}
								break;
							}
						}
					} else btn[i][z] = 0;
				}
			}
			surface->clearRect(surface->objectRect(), 0x0);
			fb.drawBrowser();
			if(fb.dirContainsMap()) {
				font.printString((unsigned int*)surface->buffer, surface->w, 25, 25, 25, 20, _RGB(0,255,0), "Directory Contains Map - Press Start");
			}
		}
		cmx::system::copy_surface(*surface);
	}
	cmx::input::close_joystick();
	return cmx::system::stop_system();
}
